#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('clementineos:server');
var http = require('http');
var cvControllers = require('../controllers/block');
var moment = require('moment');
var _ = require('lodash');
const async = require('async');
const whitelist = require('../whitelist');

require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Check if blockchain data is updated ...
let isTimetoUpdate = () => {  
  var format = 'hh:mm:ss'
  var time = moment(process.env.START_TIME,format)
  var now = moment();

  return now.isAfter(time);  
};

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require("socket.io")(server);

io.origins((origin, callback) => {
  console.log('Origin for Socket: ' + origin);
  if (_.indexOf(whitelist.origins, origin) == -1) {
    return callback('origin not allowed', false);
  };
  callback(null, true);
});

io.on('connection', socket => {
  console.warn('... socket connected OK.');
  runUpdate_COVID19(socket);
});

let runUpdate_COVID19 = socket => {

  if (isTimetoUpdate() || process.env.TEST) {

    console.log('starting to update Blockchain network ... ');

    cvControllers.update(socket, (err, response) => {

      async.eachSeries(response.blocks, (b, callback) => {
        socket.emit('block', b);
        callback();
      }, err => {
        console.info('Send data to Blockchain - Finished OK');
      });

      async.eachSeries(response.errors, (e, callback) => {
        socket.emit('error', e);
        callback();
      }, err => {
        console.warn('Send data to Blockchain - Finished Error');
      });

      if (err) {
        console.error('Error to update Blockchain COVID19');
      };

    });
  }; 
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
